// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram;
    static int heapBase;
    static int heapEnd;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heapEnd = 16384;

        let freeList = heapBase;
        let ram[heapBase] = 0; // next
        let ram[heapBase + 1] = heapEnd - heapBase; // length

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int previousList;
        var int currentList;
        var int block;

        let currentList = freeList;
        while (true) {
            if (ram[currentList + 1] = 0) {
                do Sys.error(6);
                return 0;
            }

            if (~(ram[currentList + 1] < (size + 2))) {
                let block = ram[currentList + 1] - size - 2;
                let ram[currentList + 1] = ram[currentList + 1] - size - 2;

                return block;
            }

			let currentList = ram[currentList];
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[o] = ram[freeList];
        let ram[o + 1] = ram[freeList + 1];
        let freeList = o;
        return;
    }    
}
