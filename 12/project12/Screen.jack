// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;

		let powersOfTwo = Array.new(16);

        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int adress;
		let adress = screen;
		
		while (adress < 24577) {
			do Memory.poke(adress, 0);
			let adress = adress + 1;
		}

		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitIndex;

        let address = screen + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        let bitIndex = x - (x / 16 * 16);

        if (color) {
            let value = value | powersOfTwo[bitIndex];
        } else {
            let value = value & ~(powersOfTwo[bitIndex]);
        }

        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp, x, y, vX, vY, a, b, d, dX, dY;

        let x = x1;
        let y = y1;
        let d = 0;
		let dX = Math.abs(x2 - x1);
		let dY = Math.abs(y2 - y1);

        if (dY = 0) {
            if (x1 < x2) {
                do Screen.drawHorizontalLine(x1, x2, y1);
            } else {
                do Screen.drawHorizontalLine(x2, x1, y1);
            }
            return;
        }

        if (x1 < x2) {
			let vX = 1;
		} else {
			let vX = -1;
		}

		if (y1 < y2) {
			let vY = 1;
		} else {
			let vY = -1;
		}
		
        while (~((x = x2) & (y = y2))) {
            do Screen.drawPixel(x, y);
            if (d < 0) {
                let x = x + vX;
                let d = d + dY;
            } else {
                let y = y + vY;
                let d = d - dX;
            }
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int bitX1, bitX2, addressX1, addressX2;
        
        let bitX1 = x1 - (x1 / 16 * 16);
        let bitX2 = x2 - (x2 / 16 * 16);
        let addressX1 = (y * 32) + (x1 / 16);
        let addressX2 = (y * 32) + (x2 / 16);

        if (addressX1 = addressX2) {
            do Screen.drawHorizontalPartLine(x1, x2, y);
            return;
        }

        
        if (~(bitX1 = 0)) {
            do Screen.drawHorizontalPartLine(x1, x1 - bitX1 + 16, y);
            let addressX1 = addressX1 + 1;
        }

        if (~(bitX2 = 0)) { 
            do Screen.drawHorizontalPartLine(x2 - bitX2, x2, y);
        } 
        let addressX2 = addressX2 - 1; // if mod = 0, also don't draw additionl part line

        while (~(addressX1 > addressX2) ) {
            do Memory.poke(screen + addressX1, color);
            let addressX1 = addressX1 + 1;
        }
        
        return;
    }

    /** Draws a horizontal line within one memory address. */
    function void drawHorizontalPartLine(int x1, int x2, int y) {
        var int x;
        let x = x1;
        while (~(x > x2)) {
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dX, dY, rPow2;

        if (r > 181) {
            return;
        }

        let dY = -r;
        let rPow2 = r * r;
        while (~(dY > r)) {
            let dX = Math.sqrt(rPow2 - (dY * dY));
            do Screen.drawHorizontalLine(x - dX, x + dX, y + dY);
            let dY = dY + 1;
        }

        return;
    }
}
