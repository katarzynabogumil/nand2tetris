function Board.new 0
push constant 10
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push argument 3
pop this 3
push argument 4
pop this 4
push constant 0
pop this 9
push constant 0
pop this 8
push constant 0
pop this 5
push pointer 0
call Board._constructRows 1
pop this 6
push this 9
push this 3
push constant 2
call Math.divide 2
push constant 1
call Block.new 3
pop this 7
push pointer 0
push constant 0
not
call Board._drawBlock 2
pop temp 0
push pointer 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push this 6
call Array.dispose 1
pop temp 0
push this 7
call Block.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Board.moveBlock 1
push argument 0
pop pointer 0
push this 9
push constant 1
add
pop this 9
push pointer 0
push argument 1
call Board._checkIfMovePossible 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
call Board._redrawBlock 2
pop temp 0
push constant 0
return
label IF_FALSE0
push constant 0
push constant 1
call Point.new 2
pop local 0
push pointer 0
push local 0
call Board._checkIfMovePossible 2
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 0
call Board._redrawBlock 2
pop temp 0
push constant 0
return
label IF_FALSE1
push this 8
push this 7
push constant 0
call Block.getY 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
call Board._saveBlockPosition 1
pop temp 0
push this 7
call Block.dispose 1
pop temp 0
push this 9
push this 3
push constant 2
call Math.divide 2
push constant 1
call Block.new 3
pop this 7
push constant 0
pop this 8
push pointer 0
push constant 0
not
call Board._drawBlock 2
pop temp 0
push constant 0
return
label IF_FALSE2
push this 8
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
return
label IF_FALSE3
push constant 0
return
function Board.rotateBlock 0
push argument 0
pop pointer 0
push pointer 0
call Board._checkIfRotationPossible 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push constant 0
call Board._drawBlock 2
pop temp 0
push this 7
call Block.rotate 1
pop temp 0
push pointer 0
push constant 0
not
call Board._drawBlock 2
pop temp 0
label IF_FALSE0
push constant 0
return
function Board._checkIfRotationPossible 8
push argument 0
pop pointer 0
push constant 0
not
pop local 7
push constant 0
pop local 0
push this 7
call Block.getPointsLength 1
pop local 4
label WHILE_EXP0
push local 0
push local 4
lt
not
if-goto WHILE_END0
push this 7
push local 0
call Block.getNextX 2
pop local 2
push this 7
push local 0
call Block.getNextY 2
pop local 3
push local 3
push this 6
add
pop pointer 1
push that 0
pop local 5
push local 2
push local 5
add
pop pointer 1
push that 0
pop local 6
push local 6
call BoardNode.getValue 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 7
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 7
return
function Board._redrawBlock 0
push argument 0
pop pointer 0
push pointer 0
push constant 0
call Board._drawBlock 2
pop temp 0
push this 7
push argument 1
call Block.move 2
pop temp 0
push this 7
push constant 0
call Block.getY 2
pop this 8
push pointer 0
push constant 0
not
call Board._drawBlock 2
pop temp 0
push constant 0
return
function Board._checkIfMovePossible 8
push argument 0
pop pointer 0
push constant 0
not
pop local 7
push constant 0
pop local 0
push this 7
call Block.getPointsLength 1
pop local 4
label WHILE_EXP0
push local 0
push local 4
lt
not
if-goto WHILE_END0
push this 7
push local 0
call Block.getX 2
push argument 1
call Point.getX 1
add
pop local 2
push this 7
push local 0
call Block.getY 2
push argument 1
call Point.getY 1
add
pop local 3
push local 3
push this 6
add
pop pointer 1
push that 0
pop local 5
push local 2
push local 5
add
pop pointer 1
push that 0
pop local 6
push local 6
call BoardNode.getValue 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 7
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 7
return
function Board._saveBlockPosition 8
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 7
call Block.getPointsLength 1
pop local 3
push constant 0
pop local 4
label WHILE_EXP0
push local 0
push local 3
lt
not
if-goto WHILE_END0
push this 7
push local 0
call Block.getX 2
pop local 1
push this 7
push local 0
call Block.getY 2
pop local 2
push local 2
push this 6
add
pop pointer 1
push that 0
pop local 5
push local 1
push local 5
add
pop pointer 1
push that 0
pop local 6
push local 6
push constant 0
not
call BoardNode.setValue 2
pop temp 0
push pointer 0
push local 2
call Board._checkIfFullLine 2
pop local 7
push local 7
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push constant 1
add
pop local 4
push pointer 0
push local 2
call Board._deleteRow 2
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push local 4
call Board._countScore 2
pop temp 0
push constant 0
return
function Board._deleteRow 7
push argument 0
pop pointer 0
push this 4
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push this 6
add
pop pointer 1
push that 0
pop local 2
push local 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 1
label WHILE_EXP1
push local 1
push this 3
push constant 1
add
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 4
push local 4
push constant 0
call BoardNode.setValue 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
goto IF_END0
label IF_FALSE0
push local 0
push argument 1
lt
push local 0
push argument 1
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
sub
push this 6
add
pop pointer 1
push that 0
pop local 3
push constant 1
pop local 1
label WHILE_EXP2
push local 1
push this 3
push constant 1
add
lt
not
if-goto WHILE_END2
push local 1
push local 3
add
pop pointer 1
push that 0
pop local 5
push local 1
push local 2
add
pop pointer 1
push that 0
pop local 4
push local 5
call BoardNode.getValue 1
pop local 6
push local 4
push local 6
call BoardNode.setValue 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
label IF_FALSE1
label IF_END0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board._countScore 0
push argument 0
pop pointer 0
push argument 1
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
push constant 20
add
pop this 5
label IF_FALSE0
push argument 1
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 5
push constant 100
add
pop this 5
label IF_FALSE1
push argument 1
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 5
push constant 300
add
pop this 5
label IF_FALSE2
push argument 1
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 5
push constant 1200
add
pop this 5
label IF_FALSE3
push constant 3
push constant 12
call Output.moveCursor 2
pop temp 0
push this 5
call Output.printInt 1
pop temp 0
push constant 0
return
function Board._checkIfFullLine 3
push argument 0
pop pointer 0
push constant 1
pop local 0
push argument 1
push this 6
add
pop pointer 1
push that 0
pop local 1
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push local 0
push local 1
add
pop pointer 1
push that 0
pop local 2
push local 2
call BoardNode.getValue 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Board._drawBlock 6
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 7
call Block.getPointsLength 1
pop local 3
label WHILE_EXP0
push local 0
push local 3
lt
not
if-goto WHILE_END0
push this 7
push local 0
call Block.getX 2
pop local 1
push this 7
push local 0
call Block.getY 2
pop local 2
push local 2
push this 6
add
pop pointer 1
push that 0
pop local 4
push local 1
push local 4
add
pop pointer 1
push that 0
pop local 5
push local 5
push argument 1
call BoardNode.draw 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board._constructRows 2
push argument 0
pop pointer 0
push this 4
push constant 2
add
call Array.new 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 4
push constant 2
add
lt
not
if-goto WHILE_END0
push local 0
push constant 0
eq
push local 0
push this 4
push constant 1
add
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
push pointer 0
push local 0
push constant 0
not
call Board._constructRow 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push local 0
push local 1
add
push pointer 0
push local 0
push constant 0
call Board._constructRow 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Board._constructRow 2
push argument 0
pop pointer 0
push this 3
push constant 2
add
call Array.new 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
push constant 2
add
lt
not
if-goto WHILE_END0
push local 0
push constant 0
eq
push local 0
push this 3
push constant 1
add
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
push pointer 0
push local 0
push argument 1
push constant 0
not
call Board._contructNode 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push local 0
push local 1
add
push pointer 0
push local 0
push argument 1
push argument 2
call Board._contructNode 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Board._contructNode 1
push argument 0
pop pointer 0
push this 0
push argument 1
push this 2
call Math.multiply 2
add
push this 1
push argument 2
push this 2
call Math.multiply 2
add
push this 2
push argument 3
push argument 3
call BoardNode.new 5
pop local 0
push argument 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 0
not
call BoardNode.draw 2
pop temp 0
label IF_FALSE0
push local 0
return
