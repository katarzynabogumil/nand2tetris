// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a= instruction, b= ALUOut, sel= instruction[15], out= ARegisterIn);
    Not(in= instruction[15], out= aInstruction);
    Or(a= aInstruction, b= instruction[5], out= ARegisterLoad);
    ARegister(in= ARegisterIn, load= ARegisterLoad, out= ARegisterOut);

	Mux16(a= ARegisterOut, b= inM, sel= instruction[12], out= ALUIn);
    
    And(a= instruction[15], b= instruction[4], out= DRegisterLoad);
    DRegister(in= ALUOut, load= DRegisterLoad, out= DRegisterOut);
    ALU(x= DRegisterOut, y= ALUIn, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUOut, zr= zr, ng= ng);
    
    Mux16(a= ALUOut, b= false, sel= false, out= outM);
    And(a= instruction[3], b= instruction[15], out= writeM);
    Mux16(a= ARegisterOut, b= false, sel= false, out[0..14]= addressM);

    Not(in= ng, out= notNegative);
    Not(in= zr, out= notZero);
    And(a= notNegative, b= notZero, out= positive);
    And(a= positive, b= instruction[0], out= jumpPositive);
    And(a= zr, b= instruction[1], out= jumpZero);
    And(a= ng, b= instruction[2], out= jumpNegative);
    And(a= instruction[0], b= instruction[1], out=jump0and1);
    And(a= jump0and1, b= instruction[2], out=jumpUnconditional);

    Or8Way(in[0]= jumpZero, in[1]= jumpNegative, in[2]= jumpPositive, in[3]=jumpUnconditional, in[4..7]=false, out= jump);
    And(a= jump, b= instruction[15], out= PCload);

    PC(in= ARegisterOut, load= PCload, inc= true, reset= reset, out[0..14]= pc);
}